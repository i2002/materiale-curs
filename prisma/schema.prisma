// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  expires_in        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String?       @default("student")
  password      String?
  accounts      Account[]
  sessions      Session[]
  lists         StudentList[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resource {
  id         String  @id @default(cuid())
  name       String
  type       String  @default("folder")
  parentId   String?
  courseSlug String

  parent   Resource?  @relation("resourceTree", fields: [parentId], references: [id], onDelete: Cascade)
  children Resource[] @relation("resourceTree")
  fileData FileData?  @relation()
  course   Course     @relation(fields: [courseSlug], references: [slug])
}

model FileData {
  id         Int    @id @default(autoincrement())
  resourceId String @unique
  mimeType   String
  size       Int
  path       String @unique

  resource Resource @relation(fields: [resourceId], references: [id])
}

model Course {
  slug           String @id
  name           String
  year           Int
  semester       Int
  specialization String @default("CTI")

  enrolments StudentList[]
  resources  Resource[]
}

model StudentList {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  students       User[]
  enroledCourses Course[]
}
